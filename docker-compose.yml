services:
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      WINDOW_SIZE: 1000
      MAX_CONCURRENT_REQUESTS: 5
      PORT: 8080
      REDIS_HOST: redis_discovery
      REDIS_PORT: 6379
      TIMEOUT: 8000
      CRITICAL_LOAD: 2
      MONITORING_INTERVAL: 10000
      LOAD_BALANCER_TYPE: 1
      MAX_CIRCUIT_BREAKER_RETRIES: 2
      MAX_CIRCUIT_BREAKER_SERVICE_CHECKS: 2
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 6000
    ports:
      - "7070:8080"
    networks:
      - micro-network
    depends_on:
      - service_discovery
      - redis_discovery

  service_discovery:
    build:
      context: ./service_discovery
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      PORT: 8080
      GRPC_PORT: 50051
      REDIS_HOST: redis_discovery
      REDIS_PORT: 6379
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 6000
    ports:
      - "6060:8080"
      - "50051:50051"
    networks:
      - micro-network
    depends_on:
      - redis_discovery
    volumes:
      - service_discovery-data:/app/logs

  redis_discovery:
    image: redis:latest
    restart: no
    ports:
      - "6390:6379"
    networks:
      - micro-network
    volumes:
      - redis_discovery-data:/data

  train_booking_service:
    build:
      context: ./train_booking_service
      dockerfile: Dockerfile
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure
    environment:
      SERVICE_NAME: train_booking_service
      DATABASE_URL: ${TRAIN_DATABASE_URL}
      REDIS_HOST: book_a-train-redis_cache-1-1
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SD_HOST: service_discovery
      SD_PORT: 50051
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 5000
    ports:
      - "8000"
    networks:
      - micro-network
    deploy:
      replicas: 3
    depends_on:
      - postgres_trains_monitor
      - gateway
      - redis_cache-1
      - redis_cache-2
      - redis_cache-3
      - rabbitmq

  lobby_service_1:
    build:
      context: ./lobby_service
      dockerfile: Dockerfile
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure
    environment: &lobby_service_env
      SERVICE_NAME: lobby_service
      DATABASE_URL: ${LOBBY_DATABASE_URL}
      BOOKINGS_SERVICE_URL: http://gateway:7070/ts/bookings
      REDIS_HOST: redis_cache-1
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SD_HOST: service_discovery
      SD_PORT: 50051
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 5000
    ports:
      - 9000:8000
    networks:
      - micro-network
    depends_on:
      - postgres_lobbies
      - gateway
      - redis_cache-1
      - redis_cache-2
      - redis_cache-3
      - rabbitmq

  lobby_service_2:
    build:
      context: ./lobby_service
      dockerfile: Dockerfile
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure
    environment:
      <<: *lobby_service_env
    ports:
      - 9001:8000
    networks:
      - micro-network
    depends_on:
      - postgres_lobbies
      - gateway
      - redis_cache-1
      - redis_cache-2
      - redis_cache-3
      - rabbitmq

  lobby_service_3:
    build:
      context: ./lobby_service
      dockerfile: Dockerfile
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure
    environment:
      <<: *lobby_service_env
    ports:
      - 9002:8000
    networks:
      - micro-network
    depends_on:
      - postgres_lobbies
      - gateway
      - redis_cache-1
      - redis_cache-2
      - redis_cache-3
      - rabbitmq

  x-postgres_trains: &postgres_trains
    image: citusdata/pg_auto_failover:v2.0-pg14
    networks:
      - micro-network
    depends_on:
      - postgres_trains_monitor

  postgres_trains_monitor:
    build:
      context: ./config/postgres
      dockerfile: Dockerfile
    command: >
      bash -c "python3 -u /usr/local/bin/monitor_master_node.py &
      pg_autoctl create monitor
      --pgdata /var/lib/postgres/pgaf
      --pgport 5432
      --hostname postgres_trains_monitor
      --auth trust
      --ssl-self-signed
      --run"
    environment:
      DB_USER: ${TRAIN_POSTGRES_USER}
      DB_NAME: ${TRAIN_POSTGRES_DB}
      REDIS_HOST: redis_discovery
      REDIS_PORT: 6379
    ports:
      - "5432:5432"
    networks:
      - micro-network
    volumes:
      - postgres_trains_monitor-data:/var/lib/postgres
    depends_on:
      - service_discovery

  postgres_trains_node1:
    <<: *postgres_trains
    command: >
      bash -c "pg_autoctl create postgres
      --hostname postgres_trains_node1
      --auth trust
      --monitor postgresql://autoctl_node@postgres_trains_monitor/pg_auto_failover
      --listen '*'
      --pg-hba-lan
      --username train_user
      --dbname TrainBookingServiceDb
      --ssl-self-signed
      --run"
    ports:
      - "5443:5432"
    volumes:
      - postgres_trains_node1-data:/var/lib/postgres

  postgres_trains_node2:
    <<: *postgres_trains
    command: >
      bash -c "pg_autoctl create postgres
      --hostname postgres_trains_node2
      --auth trust
      --monitor postgresql://autoctl_node@postgres_trains_monitor/pg_auto_failover
      --listen '*'
      --pg-hba-lan
      --username train_user
      --dbname TrainBookingServiceDb
      --ssl-self-signed
      --run"
    ports:
      - "5453:5432"
    volumes:
      - postgres_trains_node2-data:/var/lib/postgres

  postgres_trains_node3:
    <<: *postgres_trains
    command: >
      bash -c "pg_autoctl create postgres
      --hostname postgres_trains_node3
      --auth trust
      --monitor postgresql://autoctl_node@postgres_trains_monitor/pg_auto_failover
      --listen '*'
      --pg-hba-lan
      --username train_user
      --dbname TrainBookingServiceDb
      --ssl-self-signed
      --run"
    ports:
      - "5463:5432"
    volumes:
      - postgres_trains_node3-data:/var/lib/postgres

  postgres_trains_node4:
    <<: *postgres_trains
    command: >
      bash -c "pg_autoctl create postgres
      --hostname postgres_trains_node4
      --auth trust
      --monitor postgresql://autoctl_node@postgres_trains_monitor/pg_auto_failover
      --listen '*'
      --pg-hba-lan
      --username train_user
      --dbname TrainBookingServiceDb
      --ssl-self-signed
      --run"
    ports:
      - "5473:5432"
    volumes:
      - postgres_trains_node4-data:/var/lib/postgres

  postgres_lobbies:
    image: postgres:16-alpine3.20
    restart: no
    environment:
      - POSTGRES_USER=${LOBBY_POSTGRES_USER}
      - POSTGRES_PASSWORD=${LOBBY_POSTGRES_PASSWORD}
      - POSTGRES_DB=${LOBBY_POSTGRES_DB}
    ports:
      - "5433:5432"
    networks:
      - micro-network
    volumes:
      - postgres_lobbies-data:/var/lib/postgresql/data

  x-redis_cache: &redis_cache
    image: redis:latest
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - micro-network
    volumes:
      - ./config/redis_cluster/redis.conf:/usr/local/etc/redis/redis.conf

  redis_cache-1:
    <<: *redis_cache
    ports:
      - 6379:6379

  redis_cache-2:
    <<: *redis_cache
    ports:
      - 6380:6379

  redis_cache-3:
    <<: *redis_cache
    ports:
      - 6381:6379

  redis_cluster_init:
    image: redis:latest
    restart: no
    command:
      [
        "/bin/sh",
        "-c",
        "redis-cli --cluster create book_a-train-redis_cache-1-1:6379 book_a-train-redis_cache-2-1:6379 book_a-train-redis_cache-3-1:6379 --cluster-yes",
      ]
    networks:
      - micro-network
    depends_on:
      - redis_cache-1
      - redis_cache-2
      - redis_cache-3

  rabbitmq:
    image: rabbitmq:management
    restart: no
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - micro-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.3
    command: ["filebeat", "-e", "-strict.perms=false"]
    networks:
      - micro-network
    volumes:
      - service_discovery-data:/usr/share/filebeat/data
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
    depends_on:
      - logstash

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - micro-network
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: logstash
    ports:
      - "5000:5000"
      - "9600:9600"
    networks:
      - micro-network
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - micro-network
    depends_on:
      - elasticsearch

volumes:
  redis_discovery-data:
  postgres_trains_monitor-data:
  postgres_trains_node1-data:
  postgres_trains_node2-data:
  postgres_trains_node3-data:
  postgres_trains_node4-data:
  postgres_lobbies-data:
  service_discovery-data:
  elasticsearch-data:

networks:
  micro-network:
    driver: bridge
