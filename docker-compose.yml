services:
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      PROXY_TIMEOUT: 10000
      WINDOW_SIZE: 1000
      MAX_CONCURRENT_REQUESTS: 5
      PORT: 8080
      REDIS_HOST: redis_discovery
      REDIS_PORT: 6379
      ERROR_THRESHOLD: 3
      CRITICAL_LOAD: 2
      MONITORING_INTERVAL: 5000
    ports:
      - '7070:8080'
    networks:
      - micro-network
    depends_on:
      - service_discovery
      - redis_discovery

  service_discovery:
    build:
      context: ./service_discovery
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      PORT: 8080
      GRPC_PORT: 50051
      REDIS_HOST: redis_discovery
      REDIS_PORT: 6379
    ports:
      - '6060:8080'
      - '50051:50051'
    networks:
      - micro-network
    depends_on:
      - redis_discovery

  redis_discovery:
    image: redis:latest
    restart: no
    ports:
      - "6380:6380"
    networks:
      - micro-network
    volumes:
      - redis_discovery-data:/data

  train_booking_service:
    build:
      context: ./train_booking_service
      dockerfile: Dockerfile  
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure
    environment:
      SERVICE_NAME: train_booking_service
      DATABASE_URL: ${TRAIN_DATABASE_URL}
      REDIS_HOST: redis_cache
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SD_HOST: service_discovery
      SD_PORT: 50051
    ports:
      - '8000'
    networks:
      - micro-network
    # deploy:
    #   replicas: 3
    depends_on:
      - postgres_trains
      - gateway
      - redis_cache
      - rabbitmq

  lobby_service:
    build:
      context: ./lobby_service
      dockerfile: Dockerfile  
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure
    environment:
      SERVICE_NAME: lobby_service
      DATABASE_URL: ${LOBBY_DATABASE_URL}
      BOOKINGS_SERVICE_URL: ${BOOKINGS_SERVICE_URL}
      REDIS_HOST: redis_cache
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SD_HOST: service_discovery
      SD_PORT: 50051
    ports:
      - '8000'
    networks:
      - micro-network
    # deploy:
    #   replicas: 3
    depends_on:
      - postgres_lobbies
      - gateway
      - redis_cache
      - rabbitmq

  postgres_trains:
    image: postgres:16-alpine3.20
    restart: no
    environment:
      - POSTGRES_USER=${TRAIN_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TRAIN_POSTGRES_PASSWORD}
      - POSTGRES_DB=${TRAIN_POSTGRES_DB}
    ports:
      - '5432:5432'
    networks:
      - micro-network
    volumes: 
        - postgres_trains-data:/var/lib/postgresql/data

  postgres_lobbies:
    image: postgres:16-alpine3.20
    restart: no
    environment:
      - POSTGRES_USER=${LOBBY_POSTGRES_USER}
      - POSTGRES_PASSWORD=${LOBBY_POSTGRES_PASSWORD}
      - POSTGRES_DB=${LOBBY_POSTGRES_DB}
    ports:
      - '5433:5432'
    networks:
      - micro-network
    volumes: 
        - postgres_lobbies-data:/var/lib/postgresql/data
  
  redis_cache:
    image: redis:latest
    restart: no
    ports:
      - "6379:6379"
    networks:
      - micro-network
    volumes:
      - redis_cache-data:/data

  rabbitmq:
    image: rabbitmq:management
    restart: no
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - micro-network

volumes:
  redis_discovery-data:
  postgres_trains-data:
  postgres_lobbies-data:
  redis_cache-data:

networks:
  micro-network:
    driver: bridge
