services:
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      WINDOW_SIZE: 1000
      MAX_CONCURRENT_REQUESTS: 5
      PORT: 8080
      REDIS_HOST: redis_discovery
      REDIS_PORT: 6379
      ERROR_THRESHOLD: 3
      CRITICAL_LOAD: 2
      MONITORING_INTERVAL: 5000
      LOAD_BALANCER_TYPE: 1
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 6000
    ports:
      - '7070:8080'
    networks:
      - micro-network
    depends_on:
      - service_discovery
      - redis_discovery

  service_discovery:
    build:
      context: ./service_discovery
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      PORT: 8080
      GRPC_PORT: 50051
      REDIS_HOST: redis_discovery
      REDIS_PORT: 6379
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 6000
    ports:
      - '6060:8080'
      - '50051:50051'
    networks:
      - micro-network
    depends_on:
      - redis_discovery
    volumes:
      - service_discovery-data:/app/logs

  redis_discovery:
    image: redis:latest
    restart: no
    ports:
      - "6390:6379"
    networks:
      - micro-network
    volumes:
      - redis_discovery-data:/data

  train_booking_service:
    build:
      context: ./train_booking_service
      dockerfile: Dockerfile  
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure
    environment:
      SERVICE_NAME: train_booking_service
      DATABASE_URL: ${TRAIN_DATABASE_URL}
      REDIS_HOST: book_a-train-redis_cache-1-1
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SD_HOST: service_discovery
      SD_PORT: 50051
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 5000
    ports:
      - '8000'
    networks:
      - micro-network
    # deploy:
    #   replicas: 3
    depends_on:
      - postgres_trains
      - gateway
      - redis_cache-1
      - redis_cache-2
      - redis_cache-3
      - rabbitmq

  lobby_service:
    build:
      context: ./lobby_service
      dockerfile: Dockerfile  
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure
    environment:
      SERVICE_NAME: lobby_service
      DATABASE_URL: ${LOBBY_DATABASE_URL}
      BOOKINGS_SERVICE_URL: http://gateway:7070/ts/bookings
      REDIS_HOST: redis_cache-1
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      SD_HOST: service_discovery
      SD_PORT: 50051
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 5000
    ports:
      - '9000:8000'
    networks:
      - micro-network
    # deploy:
    #   replicas: 3
    depends_on:
      - postgres_lobbies
      - gateway
      - redis_cache-1
      - redis_cache-2
      - redis_cache-3
      - rabbitmq

  postgres_trains:
    image: postgres:16-alpine3.20
    restart: no
    environment:
      - POSTGRES_USER=${TRAIN_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TRAIN_POSTGRES_PASSWORD}
      - POSTGRES_DB=${TRAIN_POSTGRES_DB}
    ports:
      - '5432:5432'
    networks:
      - micro-network
    volumes: 
        - postgres_trains-data:/var/lib/postgresql/data

  postgres_lobbies:
    image: postgres:16-alpine3.20
    restart: no
    environment:
      - POSTGRES_USER=${LOBBY_POSTGRES_USER}
      - POSTGRES_PASSWORD=${LOBBY_POSTGRES_PASSWORD}
      - POSTGRES_DB=${LOBBY_POSTGRES_DB}
    ports:
      - '5433:5432'
    networks:
      - micro-network
    volumes: 
        - postgres_lobbies-data:/var/lib/postgresql/data
  
  redis_cache-1:
    image: redis:latest
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - 6379:6379
    networks:
      - micro-network
    volumes:
      - ./config/redis_cluster/redis.conf:/usr/local/etc/redis/redis.conf

  redis_cache-2:
    image: redis:latest
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - 6380:6379
    networks:
      - micro-network
    volumes:
      - ./config/redis_cluster/redis.conf:/usr/local/etc/redis/redis.conf

  redis_cache-3:
    image: redis:latest
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - 6381:6379
    networks:
      - micro-network
    volumes:
      - ./config/redis_cluster/redis.conf:/usr/local/etc/redis/redis.conf

  redis_cluster_init:
    image: redis:latest
    restart: no
    command: ["/bin/sh", "-c", "redis-cli --cluster create book_a-train-redis_cache-1-1:6379 book_a-train-redis_cache-2-1:6379 book_a-train-redis_cache-3-1:6379 --cluster-yes"]
    networks:
      - micro-network
    depends_on:
      - redis_cache-1
      - redis_cache-2
      - redis_cache-3

  rabbitmq:
    image: rabbitmq:management
    restart: no
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - micro-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.3
    command: ["filebeat", "-e", "-strict.perms=false"]
    networks:
      - micro-network
    volumes:
      - service_discovery-data:/usr/share/filebeat/data
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
    depends_on:
      - logstash

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - micro-network
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: logstash
    ports:
      - "5000:5000"
      - "9600:9600"
    networks:
      - micro-network
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - micro-network
    depends_on:
      - elasticsearch

volumes:
  redis_discovery-data:
  postgres_trains-data:
  postgres_lobbies-data:
  service_discovery-data:
  elasticsearch-data:

networks:
  micro-network:
    driver: bridge
